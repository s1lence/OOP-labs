C++ (pronounced cee plus plus /ˈsiː plʌs plʌs/) is a general-purpose programming language.
 It has imperative, object-oriented and generic programming features, while also providing
 facilities for low-level memory manipulation.

It was designed with a bias toward system programming and embedded,
 resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights.
 C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,
 including desktop applications, servers (e.g. e-commerce, web search or SQL servers),
 and performance-critical applications (e.g. telephone switches or space probes).
 C++ is a compiled language, with implementations of it available on many platforms.
 Many vendors provide C++ compilers, including the Free Software Foundation, Microsoft, Intel, and IBM.

C++ is standardized by the International Organization for Standardization (ISO),
 with the latest standard version ratified and published by ISO in December 2014 as ISO/IEC 14882:2014
 (informally known as C++14).[7] The C++ programming language was initially standardized in 1998 as ISO/IEC
 14882:1998, which was then amended by the C++03, ISO/IEC 14882:2003, standard. The current C++14 standard
 supersedes these and C++11, with new features and an enlarged standard library. Before the initial standardization 
 in 1998, C++ was developed by Bjarne Stroustrup at Bell Labs since 1979, as an extension of the C
 language as he wanted an efficient and flexible language similar to C, which also provided high-level
 features for program organization. The C++17 standard is due in July 2017, with the draft largely implemented
 by some compilers already, and C++20 is the next planned standard thereafter.

Many other programming languages have been influenced by C++, including C#, D, Java, and newer versions of C.

According to Stroustrup: "the name signifies the evolutionary nature of the changes from C".
[16] This name is credited to Rick Mascitti (mid-1983)[10] and was first used in December 1983.
 When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given
 in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable)
 and a common naming convention of using "+" to indicate an enhanced computer program.

During C++'s development period, the language had been referred to as "new C" and "C with Classes"
 before acquiring its final name.
 
 Throughout C++'s life, its development and evolution has been informally governed by a set of rules that its evolution should follow:[9]

It must be driven by actual problems and its features should be useful immediately in real world programs.
Every feature should be implementable (with a reasonably obvious way to do so).
Programmers should be free to pick their own programming style, and that style should be fully supported by C++.
Allowing a useful feature is more important than preventing every possible misuse of C++.
It should provide facilities for organising programs into well-defined separate parts, and provide facilities for
 combining separately developed parts.
No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer).
User-created types need to have the same support and performance as built-in types.
Unused features should not negatively impact created executables (e.g. in lower performance).
There should be no language beneath C++ (except assembly language).
C++ should work alongside other existing programming languages, rather than fostering its own separate and
 incompatible programming environment.
If the programmer's intent is unknown, allow the programmer to specify it by providing manual control.